// Copyright 2020 Arm Limited (or its affiliates). All rights reserved.
// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

#[allow(clippy::all)]
#[allow(clippy::undocumented_unsafe_blocks)]
// Keep this until https://github.com/rust-lang/rust-bindgen/issues/1651 is fixed.
#[cfg_attr(test, allow(deref_nullptr))]
pub mod bindings;
#[cfg(feature = "fam-wrappers")]
pub mod fam_wrappers;

pub use self::bindings::*;
#[cfg(feature = "fam-wrappers")]
pub use self::fam_wrappers::*;

#[cfg(feature = "with-serde")]
use serde_derive::{Deserialize, Serialize};

#[cfg_attr(feature = "with-serde", derive(Deserialize, Serialize))]
#[cfg_attr(test, derive(Debug, PartialEq))]
/// Composite version of the autogenerated bindings.
pub struct Version {
    /// Architecture.
    pub arch: &'static str,
    /// Kernel version.
    pub kernel_ver: &'static str,
    /// Crate version.
    pub crate_ver: &'static str,
}

#[allow(unused)]
static VERSION: Version = Version {
    arch: "aarch64",
    kernel_ver: "v5.13.0",
    crate_ver: env!("CARGO_PKG_VERSION"),
};

#[cfg(test)]
mod tests {
    #[cfg(feature = "with-serde")]
    extern crate serde_json;

    use super::VERSION;

    #[cfg(feature = "with-serde")]
    use super::bindings::*;

    #[test]
    fn test_version() {
        assert_eq!(VERSION.arch, "aarch64");
        assert_eq!(VERSION.kernel_ver, "v5.13.0");
        assert_eq!(VERSION.crate_ver, env!("CARGO_PKG_VERSION"));
    }

    #[test]
    #[cfg(feature = "with-serde")]
    fn test_ser_deser() {
        {
            // Test user_pt_regs ser/deser.
            let val = user_pt_regs::default();
            let val_ser = serde_json::to_string(&val).unwrap();
            let val_deser = serde_json::from_str::<user_pt_regs>(val_ser.as_str()).unwrap();
            assert_eq!(val, val_deser);
        }

        {
            // Test user_fpsimd_state ser/deser.
            let val = user_fpsimd_state::default();
            let val_ser = serde_json::to_string(&val).unwrap();
            let val_deser = serde_json::from_str::<user_fpsimd_state>(val_ser.as_str()).unwrap();
            assert_eq!(val, val_deser);
        }

        {
            // Test kvm_regs ser/deser.
            let val = kvm_regs::default();
            let val_ser = serde_json::to_string(&val).unwrap();
            let val_deser = serde_json::from_str::<kvm_regs>(val_ser.as_str()).unwrap();
            assert_eq!(val, val_deser);
        }

        {
            // Test kvm_mp_state ser/deser.
            let val = kvm_mp_state::default();
            let val_ser = serde_json::to_string(&val).unwrap();
            let val_deser = serde_json::from_str::<kvm_mp_state>(val_ser.as_str()).unwrap();
            assert_eq!(val, val_deser);
        }

        {
            // Test kvm_one_reg ser/deser.
            let val = kvm_one_reg::default();
            let val_ser = serde_json::to_string(&val).unwrap();
            let val_deser = serde_json::from_str::<kvm_one_reg>(val_ser.as_str()).unwrap();
            assert_eq!(val, val_deser);
        }
    }
}
